// Generated by CoffeeScript 1.6.3
(function() {
  var FootballFantasyPlayerService, FootballPickService, FootballScheduleService, FootballTeam, FootballTeamService,
    __hasProp = {}.hasOwnProperty;

  window.FootballTeam = FootballTeam = (function() {
    function FootballTeam() {}

    FootballTeam.constructor = function() {
      this.abbreviation = null;
      this.background_color = null;
      this.border_color = null;
      this.conference = null;
      this.division = null;
      this.font_color = null;
      this.location = null;
      this.mascot = null;
      return this.team_id = null;
    };

    FootballTeam.prototype.setFromApi = function(options) {
      this.abbreviation = options.abbreviation;
      this.background_color = options.background_color;
      this.border_color = options.border_color;
      this.conference = options.conference;
      this.division = options.division;
      this.font_color = options.font_color;
      this.location = options.location;
      this.mascot = options.mascot;
      this.team_id = options.team_id;
      return this;
    };

    return FootballTeam;

  })();

  window.FootballScheduleService = FootballScheduleService = (function() {
    function FootballScheduleService($http, $q, teamService) {
      this.$http = $http;
      this.$q = $q;
      this.teamService = teamService;
      this.seasons = null;
      this.weeks = {};
      this.games = {};
      this.selectedSeason = null;
      this.selectedWeek = null;
    }

    FootballScheduleService.prototype.setSelectedWeek = function(selectedYear, selectedWeekNumber) {
      return this.load(selectedYear, selectedWeekNumber);
    };

    FootballScheduleService.prototype.getSelectedSeason = function() {
      return this.selectedSeason;
    };

    FootballScheduleService.prototype.getSelectedWeek = function() {
      return this.selectedWeek;
    };

    FootballScheduleService.prototype.load = function(requestedYear, requestedWeek) {
      var week, year,
        _this = this;
      year = requestedYear;
      week = requestedWeek;
      return this.$q.when(this.loadSeasons()).then(function(response) {
        var a_year, seasons;
        seasons = _this.getSeasons();
        if (seasons[year] == null) {
          for (a_year in seasons) {
            if (!__hasProp.call(seasons, a_year)) continue;
            year = a_year;
          }
        }
        return _this.$q.when(_this.loadWeeks(year));
      }).then(function(response) {
        var a_week, today, week_num, weeks;
        today = moment().format('YYYY-MM-DD');
        weeks = _this.getWeeks(year);
        if (weeks[week] == null) {
          week = 0;
          for (week_num in weeks) {
            if (!__hasProp.call(weeks, week_num)) continue;
            a_week = weeks[week_num];
            if (a_week.start_date < today || !week) {
              week = week_num;
            }
          }
        }
        if (requestedYear !== year || requestedWeek !== week) {
          return _this.$q.reject({
            year: year,
            week: week
          });
        } else {
          _this.selectedSeason = _this.getSeason(year);
          _this.selectedWeek = _this.getWeek(year, week);
          return _this.$q.when(_this.loadGames(year, week));
        }
      });
    };

    FootballScheduleService.prototype.loadSeasons = function() {
      var _this = this;
      if (this.seasons != null) {
        return this.seasons;
      }
      return this.$http.get("/api/v1.0/football/seasons").success(function(response) {
        return _this.seasons = response.seasons;
      });
    };

    FootballScheduleService.prototype.loadWeeks = function(year) {
      var _this = this;
      if (this.weeks[year] != null) {
        return this.weeks[year];
      }
      return this.$http.get("/api/v1.0/football/weeks/" + year).success(function(response) {
        return _this.weeks[year] = response.weeks;
      });
    };

    FootballScheduleService.prototype.loadGames = function(year, week) {
      var _this = this;
      if ((this.games[year] != null) && (this.games[year][week] != null)) {
        return this.games[year][week];
      }
      return this.$http.get("/api/v1.0/football/schedule/" + year + "/" + week).success(function(response) {
        var game, game_id, games, teams;
        teams = _this.teamService.getTeams();
        games = response.games;
        for (game_id in games) {
          if (!__hasProp.call(games, game_id)) continue;
          game = games[game_id];
          game.away_team = teams[game.away_team_id];
          game.home_team = teams[game.home_team_id];
        }
        _this.games[year] = {};
        return _this.games[year][week] = games;
      });
    };

    FootballScheduleService.prototype.getSeason = function(year) {
      return this.getSeasons()[year];
    };

    FootballScheduleService.prototype.getSeasons = function() {
      if (this.seasons == null) {
        throw "Seasons not yet loaded using 'loadSeasons'";
      }
      return this.seasons;
    };

    FootballScheduleService.prototype.getWeek = function(year, week_num) {
      return this.getWeeks(year)[week_num];
    };

    FootballScheduleService.prototype.getWeeks = function(year) {
      if (this.weeks[year] == null) {
        throw "Weeks not yet loaded using 'loadWeeks' for year " + year;
      }
      return this.weeks[year];
    };

    FootballScheduleService.prototype.getWeeksArray = function(year) {
      var week, week_num, _ref, _results;
      if (this.weeks[year] == null) {
        throw "Weeks not yet loaded using 'loadWeeks' for year " + year;
      }
      _ref = this.weeks[year];
      _results = [];
      for (week_num in _ref) {
        if (!__hasProp.call(_ref, week_num)) continue;
        week = _ref[week_num];
        _results.push(week);
      }
      return _results;
    };

    FootballScheduleService.prototype.getGames = function(year, week_num) {
      if (year == null) {
        year = this.selectedSeason.year;
        week_num = null;
      }
      if (week_num == null) {
        week_num = this.selectedWeek.week_number;
      }
      if ((this.games[year] == null) || (this.games[year][week_num] == null)) {
        throw "Games not yet loaded using 'loadGames' for year " + year + " week " + week_num;
      }
      return this.games[year][week_num];
    };

    return FootballScheduleService;

  })();

  window.FootballTeamService = FootballTeamService = (function() {
    function FootballTeamService($http, $q) {
      this.$http = $http;
      this.$q = $q;
      this.teams = null;
    }

    FootballTeamService.prototype.load = function() {
      return this.$q.when(this.loadTeams());
    };

    FootballTeamService.prototype.loadTeams = function() {
      var _this = this;
      if (this.teams != null) {
        return this.teams;
      }
      return this.$http.get("/api/v1.0/football/teams").success(function(response) {
        var team, teamId, _ref, _results;
        _this.teams = {};
        _ref = response.teams;
        _results = [];
        for (teamId in _ref) {
          team = _ref[teamId];
          _results.push(_this.teams[teamId] = (new FootballTeam()).setFromApi(team));
        }
        return _results;
      });
    };

    FootballTeamService.prototype.getTeams = function() {
      if (this.teams == null) {
        throw "Teams not yet loaded using 'loadTeams'";
      }
      return this.teams;
    };

    return FootballTeamService;

  })();

  window.FootballTeamStandingService = FootballTeamService = (function() {
    function FootballTeamService($http, $q) {
      this.$http = $http;
      this.$q = $q;
      this.teamStandings = {};
      this.selectedConference = 'AFC';
      this.selectedDivision = 'North';
    }

    FootballTeamService.prototype.setSelectedConference = function(selectedConference) {
      this.selectedConference = selectedConference;
    };

    FootballTeamService.prototype.getSelectedConference = function() {
      return this.selectedConference;
    };

    FootballTeamService.prototype.setSelectedDivision = function(selectedDivision) {
      this.selectedDivision = selectedDivision;
    };

    FootballTeamService.prototype.getSelectedDivision = function() {
      return this.selectedDivision;
    };

    FootballTeamService.prototype.load = function(requestedYear, requestedWeek) {
      return this.$q.when(this.loadTeamStandings(requestedYear, requestedWeek));
    };

    FootballTeamService.prototype.loadTeamStandings = function(year, week) {
      var _this = this;
      if ((this.teamStandings[year] != null) && (this.teamStandings[year][week] != null)) {
        return this.teamStandings[year][week];
      }
      return this.$http.get("/api/v1.0/football/team-standings/" + year + "/" + week).success(function(response) {
        _this.teamStandings[year] = {};
        return _this.teamStandings[year][week] = response.team_standings;
      });
    };

    FootballTeamService.prototype.getTeamStandings = function(year, week_num) {
      if ((this.teamStandings[year] == null) || (this.teamStandings[year][week_num] == null)) {
        throw "Team standings not yet loaded using 'loadTeamStandings' for year " + year + " week " + week_num;
      }
      return this.teamStandings[year][week_num];
    };

    return FootballTeamService;

  })();

  window.FootballPickService = FootballPickService = (function() {
    function FootballPickService($http, $q) {
      this.$http = $http;
      this.$q = $q;
      this.picks = {};
    }

    FootballPickService.prototype.load = function(requestedYear, requestedWeek) {
      return this.$q.when(this.loadPicks(requestedYear, requestedWeek));
    };

    FootballPickService.prototype.loadPicks = function(year, week) {
      var _this = this;
      if ((this.picks[year] != null) && (this.picks[year][week] != null)) {
        return this.picks[year][week];
      }
      return this.$http.get("/api/v1.0/football/fantasy-picks/" + year + "/" + week).success(function(response) {
        _this.picks[year] = {};
        return _this.picks[year][week] = response.fantasy_picks;
      });
    };

    FootballPickService.prototype.getPicks = function(year, week_num) {
      if ((this.picks[year] == null) || (this.picks[year][week_num] == null)) {
        throw "Picks not yet loaded using 'loadPicks' for year " + year + " week " + week_num;
      }
      return this.picks[year][week_num];
    };

    return FootballPickService;

  })();

  window.FootballFantasyPlayerService = FootballFantasyPlayerService = (function() {
    function FootballFantasyPlayerService($http, $q) {
      this.$http = $http;
      this.$q = $q;
      this.players = {};
    }

    FootballFantasyPlayerService.prototype.load = function(requestedYear, requestedWeek) {
      return this.$q.when(this.loadPlayers(requestedYear, requestedWeek));
    };

    FootballFantasyPlayerService.prototype.loadPlayers = function(year) {
      var _this = this;
      if (this.players[year] != null) {
        return this.players[year];
      }
      return this.$http.get("/api/v1.0/football/fantasy-players/" + year).success(function(response) {
        var names, player, playerId, _ref, _results;
        _this.players[year] = {};
        _ref = response.fantasy_players;
        _results = [];
        for (playerId in _ref) {
          player = _ref[playerId];
          names = player.name.split(" ");
          player.displayName = names[0][0] + names[0][names[0].length - 1] + names[1][0];
          _results.push(_this.players[year][playerId] = player);
        }
        return _results;
      });
    };

    FootballFantasyPlayerService.prototype.getPlayers = function(year, week_num) {
      if (this.players[year] == null) {
        throw "Players not yet loaded using 'loadPlayers' for year " + year;
      }
      return this.players[year];
    };

    return FootballFantasyPlayerService;

  })();

}).call(this);
